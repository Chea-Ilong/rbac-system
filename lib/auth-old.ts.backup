import { db } from "./db"

export interface AuthUser {
  user_id: number
  name: string
  email: string
  roles: string[]
  privileges: string[]
}

let currentUser: AuthUser | null = null

export const auth = {
  login: async (email: string, password: string): Promise<AuthUser | null> => {
    const user = await db.getUserByEmail(email)
    if (user && user.password === password) {
      const userRoles = await db.getUserRoles(user.user_id)
      const roles = await db.getRoles()
      const privileges = await db.getPrivileges()

      const userRoleIds = userRoles.map((ur) => ur.role_id)
      const userRoleNames = roles.filter((r) => userRoleIds.includes(r.role_id))

      const privilegeIds = new Set<number>()
      for (const roleId of userRoleIds) {
        const rolePrivileges = await db.getRolePrivileges(roleId)
        rolePrivileges.forEach((rp) => {
          privilegeIds.add(rp.privilege_id)
        })
      }

      const userPrivileges = privileges.filter((p) => privilegeIds.has(p.privilege_id))

      currentUser = {
        user_id: user.user_id,
        name: user.name,
        email: user.email,
        roles: userRoleNames.map((r) => r.name),
        privileges: userPrivileges.map((p) => p.name),
      }

      return currentUser
    }
    return null
  },

  logout: () => {
    currentUser = null
  },

  getCurrentUser: () => currentUser,

  hasPrivilege: (privilegeName: string) => {
    return currentUser?.privileges.includes(privilegeName) || false
  },

  requirePrivilege: (privilegeName: string) => {
    if (!currentUser || !currentUser.privileges.includes(privilegeName)) {
      throw new Error("Access denied: Insufficient privileges")
    }
  },
}
